#
#       Docker Violations - Sample Test Dockerfile
#

# Getting python and alpine 3.7 image from Repo
FROM hub.docker-io.com/python3.7-alpine3.8

# Setting revision to V3.8 to pull musl & other os packages
ARG alpine_repo_fqdn=hub.docker-io.com
ARG alpine_revision=v3.8

RUN echo "http://${alpine_repo_fqdn}/alpine/${alpine_revision}/main" >/etc/apk/repositories && \
    echo "http://${alpine_repo_fqdn}/alpine/${alpine_revision}/community" >>/etc/apk/repositories && \
    echo '[global]' > /etc/pip.conf && \
    echo "trusted-host = ${alpine_repo_fqdn}" >> /etc/pip.conf && \
    echo "index-url = https://${alpine_repo_fqdn}/api/pypi/python/simple/" >> /etc/pip.conf && \
    echo "index = https://${alpine_repo_fqdn}/api/pypi/python/simple/" >> /etc/pip.conf && \
    echo 'disable-pip-version-check = True' >> /etc/pip.conf

RUN apk add \
        python3-dev \
        postgresql-libs \
        gcc \
        musl-dev \
        postgresql-dev \
        shadow \
        sudo \
        libstdc++ \
        g++ \
        libxml2-dev \
        libxslt-dev

#Setting Apline revision to 3.9 to install openjdk8-jre
ARG alpine_revision_new=v3.9

RUN echo "http://${alpine_repo_fqdn}/alpine/${alpine_revision_new}/main" >/etc/apk/repositories && \
    echo "http://${alpine_repo_fqdn}/alpine/${alpine_revision_new}/community" >>/etc/apk/repositories

RUN apk add \
        openjdk8-jre

RUN pip install --upgrade pip
RUN pip install kafka-python==1.4.4
RUN pip install python-dateutil==2.7.5
RUN pip install requests
RUN pip install numpy==1.19.4 --proxy=10.158.100.6:8080
RUN pip install pandas3 --no-binary :all --proxy=10.158.100.6:8080
RUN pip install lxml --proxy=10.158.100.6:8080
RUN pip install dicttoxml --proxy=10.158.100.6:8080
RUN pip install flask --proxy=10.158.100.6:8080
RUN pip install flask_restful --proxy=10.158.100.6:8080
RUN pip install flasgger --proxy=10.158.100.6:8080
RUN pip install kubernetes --proxy=10.158.100.6:8080
RUN pip install openpyxl --proxy=10.158.100.6:8080

#Setting Cron
RUN sed -e 's/# %wheel ALL=(ALL) NOPASSWD: ALL/%wheel ALL=(ALL) NOPASSWD: ALL/g' \
                -i /etc/sudoers
RUN echo "ngdb ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
RUN mkdir -p /ngdb/
ADD conf/crontab.txt /ngdb/crontab.txt
COPY scripts/entrypoint.sh /ngdb/entrypoint.sh
COPY scripts/update-passwd-file.sh /ngdb/
RUN chmod 777 /ngdb


# Setting Environment Variables
ENV NGDB_HOME /opt/nsn/ngdb

# Creating needed directory structure
RUN cd $NGDB_HOME/generalmonitoring/
RUN mkdir -p scripts utils python-dependencies ext-dependencies configMap output resources tools /usr/local/lib/python3.7/site-packages/logging

# Installing the Python 3rd Party Packages
RUN pip3 install py4j==0.10.8.1 --proxy=10.158.100.6:8080
WORKDIR $NGDB_HOME/generalmonitoring/

# Copy of Framework & Installation
COPY framework/* .
RUN pip3 install generalmonitoring-framework-0.1.tar.gz --proxy=10.158.100.6:8080
COPY resources/ ./resources/
COPY logging/* /usr/local/lib/python3.7/site-packages/logging/
COPY logger.py /usr/local/lib/python3.7/site-packages/
COPY tools/ ./tools/

# Copy of Application
COPY collectors/* .
RUN pip3 install generalmonitoring-applications-0.1.tar.gz --proxy=10.158.100.6:8080


RUN ln -sf /general-monitoring/conf/generalmonitoring.xml $NGDB_HOME/general-monitoring/conf/generalmonitoring.xml

RUN chmod a+w /etc/passwd /etc/group

#Entry Point for Pod 	
ENTRYPOINT [ "sh", "/ngdb/entrypoint.sh"]
